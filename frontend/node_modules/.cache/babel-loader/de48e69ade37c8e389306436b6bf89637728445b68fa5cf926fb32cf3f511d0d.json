{"ast":null,"code":"import{TextField}from\"@material-ui/core\";import{jsx as _jsx}from\"react/jsx-runtime\";const EmailInput=props=>{const{label,value,onChange,inputErrorHandler,handleInputError,required,className}=props;return/*#__PURE__*/_jsx(TextField,{label:label,variant:\"outlined\",value:value,onChange:onChange,helperText:inputErrorHandler.email.message,onBlur:event=>{if(event.target.value===\"\"){if(required){handleInputError(\"email\",true,\"Email is required\");}else{handleInputError(\"email\",false,\"\");}}else{const re=/^(([^<>()[\\]\\\\.,;:\\s@\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;if(re.test(String(event.target.value).toLowerCase())){handleInputError(\"email\",false,\"\");}else{handleInputError(\"email\",true,\"Incorrect email format\");}}},error:inputErrorHandler.email.error,className:className});};export default EmailInput;","map":{"version":3,"names":["TextField","jsx","_jsx","EmailInput","props","label","value","onChange","inputErrorHandler","handleInputError","required","className","variant","helperText","email","message","onBlur","event","target","re","test","String","toLowerCase","error"],"sources":["C:/Users/Kambala Ramakrishna/OneDrive/Desktop/jobportal/frontend/src/lib/EmailInput.js"],"sourcesContent":["import { TextField } from \"@material-ui/core\";\n\nconst EmailInput = (props) => {\n  const {\n    label,\n    value,\n    onChange,\n    inputErrorHandler,\n    handleInputError,\n    required,\n    className,\n  } = props;\n\n  return (\n    <TextField\n      label={label}\n      variant=\"outlined\"\n      value={value}\n      onChange={onChange}\n      helperText={inputErrorHandler.email.message}\n      onBlur={(event) => {\n        if (event.target.value === \"\") {\n          if (required) {\n            handleInputError(\"email\", true, \"Email is required\");\n          } else {\n            handleInputError(\"email\", false, \"\");\n          }\n        } else {\n          const re = /^(([^<>()[\\]\\\\.,;:\\s@\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\n          if (re.test(String(event.target.value).toLowerCase())) {\n            handleInputError(\"email\", false, \"\");\n          } else {\n            handleInputError(\"email\", true, \"Incorrect email format\");\n          }\n        }\n      }}\n      error={inputErrorHandler.email.error}\n      className={className}\n    />\n  );\n};\n\nexport default EmailInput;\n"],"mappings":"AAAA,OAASA,SAAS,KAAQ,mBAAmB,CAAC,OAAAC,GAAA,IAAAC,IAAA,yBAE9C,KAAM,CAAAC,UAAU,CAAIC,KAAK,EAAK,CAC5B,KAAM,CACJC,KAAK,CACLC,KAAK,CACLC,QAAQ,CACRC,iBAAiB,CACjBC,gBAAgB,CAChBC,QAAQ,CACRC,SACF,CAAC,CAAGP,KAAK,CAET,mBACEF,IAAA,CAACF,SAAS,EACRK,KAAK,CAAEA,KAAM,CACbO,OAAO,CAAC,UAAU,CAClBN,KAAK,CAAEA,KAAM,CACbC,QAAQ,CAAEA,QAAS,CACnBM,UAAU,CAAEL,iBAAiB,CAACM,KAAK,CAACC,OAAQ,CAC5CC,MAAM,CAAGC,KAAK,EAAK,CACjB,GAAIA,KAAK,CAACC,MAAM,CAACZ,KAAK,GAAK,EAAE,CAAE,CAC7B,GAAII,QAAQ,CAAE,CACZD,gBAAgB,CAAC,OAAO,CAAE,IAAI,CAAE,mBAAmB,CAAC,CACtD,CAAC,IAAM,CACLA,gBAAgB,CAAC,OAAO,CAAE,KAAK,CAAE,EAAE,CAAC,CACtC,CACF,CAAC,IAAM,CACL,KAAM,CAAAU,EAAE,CAAG,uJAAuJ,CAClK,GAAIA,EAAE,CAACC,IAAI,CAACC,MAAM,CAACJ,KAAK,CAACC,MAAM,CAACZ,KAAK,CAAC,CAACgB,WAAW,CAAC,CAAC,CAAC,CAAE,CACrDb,gBAAgB,CAAC,OAAO,CAAE,KAAK,CAAE,EAAE,CAAC,CACtC,CAAC,IAAM,CACLA,gBAAgB,CAAC,OAAO,CAAE,IAAI,CAAE,wBAAwB,CAAC,CAC3D,CACF,CACF,CAAE,CACFc,KAAK,CAAEf,iBAAiB,CAACM,KAAK,CAACS,KAAM,CACrCZ,SAAS,CAAEA,SAAU,CACtB,CAAC,CAEN,CAAC,CAED,cAAe,CAAAR,UAAU"},"metadata":{},"sourceType":"module","externalDependencies":[]}